
machine(L1CacheCE, "Copy Engine Controller", genericType="DMA")
: Sequencer * sequencer,
  int request_latency = 6
{

  MessageBuffer responseFromDir, network="From", virtual_network="1", ordered="true", vnet_type="response";
  MessageBuffer reqToDirectory, network="To", virtual_network="0", ordered="true", vnet_type="request";

  state_declaration(State, desc="CE states", default="L1CacheCE_State_READY") {
    READY, AccessPermission:Invalid, desc="Ready to accept a new request";
    BUSY_RD, AccessPermission:Busy, desc="Busy: currently processing a request";
    BUSY_WR, AccessPermission:Busy, desc="Busy: currently processing a request";
  }

  enumeration(Event, desc="CE events") {
    ReadRequest,  desc="A new read request";
    WriteRequest, desc="A new write request";
    Data,         desc="Data from a CE memory read";
    Ack,          desc="CE write to memory completed";
  }

  // TBE fields
  structure(TBE, desc="...") {
    State TBEState,          desc="Transient state";
    DataBlock DataBlk,       desc="data for the block, required for concurrent writebacks";
  }

  structure(TBETable, external="yes") {
    TBE lookup(Address);
    void allocate(Address);
    void deallocate(Address);
    bool isPresent(Address);
    bool areNSlotsAvailable(int);
  }
  TBETable TBEs, template_hack="<L1CacheCE_TBE>";

  void set_tbe(TBE b);
  void unset_tbe();


  MessageBuffer mandatoryQueue, ordered="false", no_vector="true";
  State cur_state, no_vector="true";

  State getState(TBE tbe, Address addr) {
    return cur_state;
  }
  void setState(TBE tbe, Address addr, State state) {
  cur_state := state;
  }

  AccessPermission getAccessPermission(Address addr) {
    return AccessPermission:NotPresent;
  }

  void setAccessPermission(Address addr, State state) {
  }

  DataBlock getDataBlock(Address addr), return_by_ref="yes" {
    error("DMA Controller does not support getDataBlock function.\n");
  }

  out_port(reqToDirectory_out, DMARequestMsg, reqToDirectory, desc="...");

  in_port(dmaRequestQueue_in, RubyRequest, mandatoryQueue, desc="...") {
    if (dmaRequestQueue_in.isReady()) {
      peek(dmaRequestQueue_in, RubyRequest) {
        if (in_msg.Type == RubyRequestType:LD ) {
          trigger(Event:ReadRequest, in_msg.LineAddress, TBEs[in_msg.LineAddress]);
        } else if (in_msg.Type == RubyRequestType:ST) {
            trigger(Event:WriteRequest, in_msg.LineAddress, TBEs[in_msg.LineAddress]);
        } else {
          error("Invalid request type");
        }
      }
    }
  }

  in_port(dmaResponseQueue_in, DMAResponseMsg, responseFromDir, desc="...") {
    if (dmaResponseQueue_in.isReady()) {
      peek( dmaResponseQueue_in, DMAResponseMsg) {
        if (in_msg.Type == DMAResponseType:ACK) {
            trigger(Event:Ack, in_msg.LineAddress, TBEs[in_msg.LineAddress]);
        } else if (in_msg.Type == DMAResponseType:DATA) {
            trigger(Event:Data, in_msg.LineAddress, TBEs[in_msg.LineAddress]);
        } else {
          error("Invalid response type");
        }
      }
    }
  }

  action(s_sendReadRequest, "s", desc="Send a DMA read request to memory") {
    peek(dmaRequestQueue_in, RubyRequest) {
      enqueue(reqToDirectory_out, DMARequestMsg, latency=request_latency) {
        out_msg.LineAddress := in_msg.LineAddress;
        out_msg.Type := DMARequestType:READ;
        out_msg.Requestor := machineID;
        out_msg.Len := in_msg.Size;
        out_msg.Destination.add(map_Address_to_Directory(address));
        out_msg.MessageSize := MessageSizeType:Writeback_Control;
      }
    }
  }

  action(s_sendWriteRequest, "\s", desc="Send a DMA write request to memory") {
    peek(dmaRequestQueue_in, RubyRequest) {
      enqueue(reqToDirectory_out, DMARequestMsg, latency=request_latency) {
          out_msg.LineAddress := in_msg.LineAddress;
          out_msg.Type := DMARequestType:WRITE;
          out_msg.Requestor := machineID;
          out_msg.Len := in_msg.Size;
          out_msg.Destination.add(map_Address_to_Directory(address));
          out_msg.MessageSize := MessageSizeType:Writeback_Control;
        }
      }
  }

  action(a_ackCallback, "a", desc="Notify dma controller that write request completed") {
    peek (dmaResponseQueue_in, DMAResponseMsg) {
        DataBlock db := in_msg.DataBlk;
        sequencer.writeCallback(in_msg.LineAddress, db);
    }
  }

  action(d_dataCallback, "d", desc="Write data to dma sequencer") {
      peek (dmaResponseQueue_in, DMAResponseMsg) {
        DataBlock db := in_msg.DataBlk;
        sequencer.readCallback(in_msg.LineAddress, db);
    }
  }

  action(p_popRequestQueue, "p", desc="Pop request queue") {
    dmaRequestQueue_in.dequeue();
  }

  action(p_popResponseQueue, "\p", desc="Pop request queue") {
    dmaResponseQueue_in.dequeue();
  }

  action(v_allocateTBE, "v", desc="Allocate TBE") {
    TBEs.allocate(address);
    set_tbe(TBEs[address]);
  }

  action(w_deallocateTBE, "w", desc="Deallocate TBE") {
    TBEs.deallocate(address);
    unset_tbe();
  }

  transition(READY, ReadRequest) {
    s_sendReadRequest;
    v_allocateTBE;
    p_popRequestQueue;
  }

  transition(READY, WriteRequest) {
    s_sendWriteRequest;
    v_allocateTBE;
    p_popRequestQueue;
  }

  transition(READY, Data) {
    d_dataCallback;
    w_deallocateTBE;
    p_popResponseQueue;
  }

  transition(READY, Ack) {
    a_ackCallback;
    w_deallocateTBE;
    p_popResponseQueue;
  }
}
