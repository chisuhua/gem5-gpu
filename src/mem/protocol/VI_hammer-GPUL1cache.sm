
machine(L1CacheVI, "VI L1 Cache", genericType="L1Cache")
: Sequencer * sequencer,
  CacheMemory * cacheMemory,
  int l2_select_num_bits,
  int num_l2,
  int issue_latency = 416,
{

  // NETWORK BUFFERS
  MessageBuffer requestFromL1Cache, network="To", virtual_network="7", ordered="true", vnet_type="request";
  MessageBuffer atomicRequestFromL1Cache, network="To", virtual_network="8", ordered="true", vnet_type="request";

  MessageBuffer responseToL1Cache, network="From", virtual_network="6", ordered="true", vnet_type="response";

  // STATES
  state_declaration(State, desc="Cache states") {
    I, AccessPermission:Invalid, desc="Not Present/Invalid";
    V, AccessPermission:Read_Only, desc="Valid";
    V_a, AccessPermission:Read_Only, desc="Valid waiting for other atomic (locked & blocking)";
    VI, AccessPermission:Busy, desc="Modified, issued PUT";
    VI_a, AccessPermission:Busy, desc="Modified by atomic, issued PUT";

    IV, AccessPermission:Busy, desc="Issued request for LOAD/IFETCH";
    IV_a, AccessPermission:Busy, desc="Issued request for LOAD/IFETCH for atomic";
  }

  // EVENTS
  enumeration(Event, desc="Cache events") {
    // From processor

    Load,       desc="Load request from processor";
    Ifetch,     desc="Ifetch request from processor";
    Store,      desc="Store request from processor";

    Atomic,     desc="Atomic request from processor";

    Data,       desc="Data from network";

    //Inv,        desc="Invalidate request from dir";

    Replacement,  desc="Replace a block";
    Writeback_Ack,   desc="Ack from the directory for a writeback";
  }

  // STRUCTURE DEFINITIONS

  MessageBuffer mandatoryQueue, ordered="false";

  // CacheEntry
  structure(Entry, desc="...", interface="AbstractCacheEntry") {
    State CacheState,        desc="cache state";
    bool Dirty,              desc="Is the data dirty (different than memory)?";
    DataBlock DataBlk,       desc="Data in the block";
  }


  // TBE fields
  structure(TBE, desc="...") {
    State TBEState,          desc="Transient state";
    DataBlock DataBlk,       desc="data for the block, required for concurrent writebacks";
  }

  structure(TBETable, external="yes") {
    TBE lookup(Address);
    void allocate(Address);
    void deallocate(Address);
    bool isPresent(Address);
  }


  // STRUCTURES

  TBETable TBEs, template_hack="<L1CacheVI_TBE>";

  // PROTOTYPES
  void set_cache_entry(AbstractCacheEntry a);
  void unset_cache_entry();
  void set_tbe(TBE b);
  void unset_tbe();

  Entry getCacheEntry(Address address), return_by_pointer="yes" {
    return static_cast(Entry, "pointer", cacheMemory.lookup(address));
  }


  int l2_select_low_bit, default="RubySystem::getBlockSizeBits()";

  // External functions
  MachineID getL2ID(Address num, int num_l2, int select_bits, int select_start_bit);

  // FUNCTIONS
  Event mandatory_request_type_to_event(RubyRequestType type) {
   if (type == RubyRequestType:LD) {
      return Event:Load;
    } else if (type == RubyRequestType:IFETCH) {
      return Event:Ifetch;
    } else if (type == RubyRequestType:ST)  {
      return Event:Store;
    } else if (type == RubyRequestType:ATOMIC) {
      return Event:Atomic;
    } else {
      error("Invalid RubyRequestType");
    }
  }

  State getState(TBE tbe, Entry cache_entry, Address addr) {

    if (is_valid(tbe)) {
      return tbe.TBEState;
    }
    else if (is_valid(cache_entry)) {
      return cache_entry.CacheState;
    }
    else {
      return State:I;
    }
  }

  void setState(TBE tbe, Entry cache_entry, Address addr, State state) {

    if (is_valid(tbe)) {
      tbe.TBEState := state;
    }

    if (is_valid(cache_entry)) {
      cache_entry.CacheState := state;
    }
  }

  AccessPermission getAccessPermission(Address addr) {
    TBE tbe := TBEs[addr];
    if(is_valid(tbe)) {
      return L1CacheVI_State_to_permission(tbe.TBEState);
    }

    Entry cache_entry := getCacheEntry(addr);
    if(is_valid(cache_entry)) {
      return L1CacheVI_State_to_permission(cache_entry.CacheState);
    }

    return AccessPermission:NotPresent;
  }

  void setAccessPermission(Entry cache_entry, Address addr, State state) {
    if (is_valid(cache_entry)) {
      cache_entry.changePermission(L1CacheVI_State_to_permission(state));
    }
  }

  DataBlock getDataBlock(Address addr), return_by_ref="yes" {
    return getCacheEntry(addr).DataBlk;
  }

  GenericMachineType getNondirectHitMachType(MachineID sender) {
    if (machineIDToMachineType(sender) == MachineType:L1CacheVI) {
      //
      // NOTE direct local hits should not call this
      //
      return GenericMachineType:L1Cache_wCC;
    } else {
      return ConvertMachToGenericMach(machineIDToMachineType(sender));
    }
  }

  // NETWORK PORTS

  out_port(requestNetwork_out, RequestMsgVI, requestFromL1Cache);
  out_port(requestNetworkAtomic_out, RequestMsgVI, atomicRequestFromL1Cache);

  in_port(responseNetwork_in, ResponseMsgVI, responseToL1Cache) {
    if (responseNetwork_in.isReady()) {
      peek(responseNetwork_in, ResponseMsgVI, block_on="Address") {

        Entry cache_entry := getCacheEntry(in_msg.Address);
        TBE tbe := TBEs[in_msg.Address];

        if (in_msg.Type == CoherenceResponseTypeVI:DATA) {
          trigger(Event:Data, in_msg.Address, cache_entry, tbe);
        }
        else if (in_msg.Type == CoherenceResponseTypeVI:WB_ACK) {
          trigger(Event:Writeback_Ack, in_msg.Address, cache_entry, tbe);
        }
        else {
          error("Unexpected message");
        }
      }
    }
  }

    // Mandatory Queue
  in_port(mandatoryQueue_in, RubyRequest, mandatoryQueue, desc="...") {
    if (mandatoryQueue_in.isReady()) {
      peek(mandatoryQueue_in, RubyRequest, block_on="LineAddress") {

        Entry cache_entry := getCacheEntry(in_msg.LineAddress);
        if (is_invalid(cache_entry) &&
            cacheMemory.cacheAvail(in_msg.LineAddress) == false ) {
          // make room for the block
          trigger(Event:Replacement, cacheMemory.cacheProbe(in_msg.LineAddress),
                  getCacheEntry(cacheMemory.cacheProbe(in_msg.LineAddress)),
                  TBEs[cacheMemory.cacheProbe(in_msg.LineAddress)]);
        }
        else {
          trigger(mandatory_request_type_to_event(in_msg.Type), in_msg.LineAddress,
                  cache_entry, TBEs[in_msg.LineAddress]);
        }
      }
    }
  }

  // ACTIONS

  action(a_issueRequest, "a", desc="Issue a request") {
    enqueue(requestNetwork_out, RequestMsgVI, latency=issue_latency) {
      out_msg.Address := address;
      out_msg.Type := CoherenceRequestTypeVI:GET;
      out_msg.Requestor := machineID;
      out_msg.Destination.add(getL2ID(address, num_l2, l2_select_num_bits, l2_select_low_bit));
      out_msg.MessageSize := MessageSizeType:Control;
    }
  }

  action(b_issuePUT, "b", desc="Issue a PUT request") {
    enqueue(requestNetwork_out, RequestMsgVI, latency=issue_latency) {
      out_msg.Address := address;
      out_msg.Type := CoherenceRequestTypeVI:PUT;
      out_msg.Requestor := machineID;
      out_msg.Destination.add(getL2ID(address, num_l2, l2_select_num_bits, l2_select_low_bit));
      out_msg.MessageSize := MessageSizeType:Data;
    }
  }

  action(a_issueAtomicRequest, "aa", desc="Issue an atomic get request") {
    enqueue(requestNetwork_out, RequestMsgVI, latency=issue_latency) {
    out_msg.Address := address;
      out_msg.Type := CoherenceRequestTypeVI:GET_Atom;
      out_msg.Requestor := machineID;
      out_msg.Destination.add(getL2ID(address, num_l2, l2_select_num_bits, l2_select_low_bit));
      out_msg.MessageSize := MessageSizeType:Control;
    }
  }

  action(b_issueAtomicPUT, "ba", desc="Issue an atomic PUT request") {
    enqueue(requestNetworkAtomic_out, RequestMsgVI, latency=issue_latency) {
      out_msg.Address := address;
      out_msg.Type := CoherenceRequestTypeVI:PUT_Atom;
      out_msg.Requestor := machineID;
      out_msg.Destination.add(getL2ID(address, num_l2, l2_select_num_bits, l2_select_low_bit));
      out_msg.MessageSize := MessageSizeType:Data;
    }
  }

  action(i_allocateL1CacheBlock, "c", desc="Allocate a cache block") {
    if (is_valid(cache_entry)) {
    } else {
      set_cache_entry(cacheMemory.allocate(address, new Entry));
    }
  }

  action(h_deallocateL1CacheBlock, "d", desc="deallocate a cache block") {
    if (is_valid(cache_entry)) {
      cacheMemory.deallocate(address);
      unset_cache_entry();
    }
  }

  action(m_popMandatoryQueue, "e", desc="Pop the mandatory request queue") {
    mandatoryQueue_in.dequeue();
  }

  action(n_popResponseQueue, "f", desc="Pop the response queue") {
    profileMsgDelay(1, responseNetwork_in.dequeue_getDelayCycles());
  }

  action(p_profileMiss, "g", desc="Profile cache miss") {
    peek(mandatoryQueue_in, RubyRequest) {
      cacheMemory.profileMiss(in_msg);
    }
  }

  action(r_load_hit, "h", desc="Notify sequencer the load completed.") {
    assert(is_valid(cache_entry));
    DPRINTF(RubySlicc,"%s\n", cache_entry.DataBlk);
    sequencer.readCallback(address,
                           GenericMachineType:L1Cache,
                           cache_entry.DataBlk);
  }

  action(rx_load_hit, "rx", desc="External load completed.") {
    peek(responseNetwork_in, ResponseMsgVI) {
      assert(is_valid(cache_entry));
      DPRINTF(RubySlicc,"%s\n", cache_entry.DataBlk);
      sequencer.readCallback(address,
                             getNondirectHitMachType(in_msg.Sender),
                             cache_entry.DataBlk);
    }
  }

  action(s_store_hit, "i", desc="Notify sequencer that store completed.") {
    assert(is_valid(cache_entry));
    DPRINTF(RubySlicc,"%s\n", cache_entry.DataBlk);
    sequencer.writeCallback(address,
                            GenericMachineType:L1Cache,
                            cache_entry.DataBlk);
  }

   action(sx_store_hit, "sx", desc="External store completed.") {
      assert(is_valid(tbe));
      DPRINTF(RubySlicc,"%s\n", cache_entry.DataBlk);
      sequencer.writeCallback(address,
                              GenericMachineType:Directory,
                              tbe.DataBlk);
  }

  action(u_writeDataToCache, "j", desc="Write data to the cache") {
    peek(responseNetwork_in, ResponseMsgVI) {
      assert(is_valid(cache_entry));
      cache_entry.DataBlk := in_msg.DataBlk;
    }
  }

  action(v_allocateTBE, "k", desc="Allocate TBE") {
    TBEs.allocate(address);
    set_tbe(TBEs[address]);
  }


  action(w_deallocateTBE, "l", desc="Deallocate TBE") {
    TBEs.deallocate(address);
    unset_tbe();
  }

  action(x_copyDataFromCacheToTBE, "m", desc="Copy data from cache to TBE") {
    assert(is_valid(cache_entry));
    assert(is_valid(tbe));
    tbe.DataBlk := cache_entry.DataBlk;
  }

  action(z_stall, "z", desc="stall") {
    // do nothing
  }

  // TRANSITIONS

  transition({IV, IV_a, VI_a, VI}, {Load, Ifetch, Store, Replacement, Atomic}) {
    z_stall;
  }

  transition(V_a, {Load, Ifetch, Store, Replacement}) {
    z_stall;
  }

  transition(V, Store, VI) {
    s_store_hit;
    m_popMandatoryQueue;

    v_allocateTBE;
    b_issuePUT;
    x_copyDataFromCacheToTBE;
  }

  transition(V, {Load, Ifetch}) {
    r_load_hit;
    m_popMandatoryQueue;
  }

  transition(I, Store, VI) {
    v_allocateTBE;
    sx_store_hit;
    p_profileMiss;
    m_popMandatoryQueue;

    b_issuePUT;
  }

  transition(I, {Load, Ifetch}, IV) {
    v_allocateTBE;
    i_allocateL1CacheBlock;
    a_issueRequest;
    p_profileMiss;
    m_popMandatoryQueue;
  }

  transition(IV, Data, V) {
    u_writeDataToCache;
    rx_load_hit;
    w_deallocateTBE;
    n_popResponseQueue;
  }

  transition(I, Atomic, IV_a) {
    v_allocateTBE;
    i_allocateL1CacheBlock;
    a_issueAtomicRequest;
    p_profileMiss;
    m_popMandatoryQueue;
  }

  transition(V, Atomic, IV_a) {
    v_allocateTBE;
    a_issueAtomicRequest;
    m_popMandatoryQueue;
  }

  transition(IV_a, Data, V_a) {
    u_writeDataToCache;
    sx_store_hit;
    w_deallocateTBE;
    n_popResponseQueue;
  }

  transition(V_a, Atomic, VI_a) {
    s_store_hit;
    m_popMandatoryQueue;

    v_allocateTBE;
    b_issueAtomicPUT;
    x_copyDataFromCacheToTBE;
  }

  transition({I, V}, Replacement, I) {
    h_deallocateL1CacheBlock;
  }

  transition(VI, Writeback_Ack, I) {
    w_deallocateTBE;
    n_popResponseQueue;
  }

  transition(VI_a, Writeback_Ack, I) {
    h_deallocateL1CacheBlock;
    w_deallocateTBE;
    n_popResponseQueue;
  }

}

